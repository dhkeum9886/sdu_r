demo()
str(diamonds)
str(tmp)
str(iris)
setwd('D:/Project/sdu_r/8w')
install.packages("e1071")
library(e1071)
library("e1071")
rm(list=ls())  #메모리 자료 모두삭제
ls()
data(iris)
# 메모리에 iris 객체를 올려놓음 attach에서 detach 하기전까지는
# iris$Species 를 Species로 해도 됨
attach(iris)
ls()
head(Species)
ls()
head(Species)
install.packages("caret")
library("caret")
###y값에 맞게 데이터 추출
set.seed(1234)
intrain=createDataPartition(y=Species, p=0.7, list=FALSE)  #attach안했으면 y=iris$Specie
train=iris[intrain, ]
test=iris[-intrain, ]
str(train)
str(test)
## classification mode
# default with factor response:
model <- svm(Species ~ ., data = train)  ##attach하지 않아도 Species임
##여러개의 gamma와 cost값을 사용_시간오래걸리수 있음
model_1 <- tune.svm(Species ~ ., data = train, gamma=2^(-1:1),cost=2^(2:4))
model
print("-----------------------------------")
model_1
##훈련데이터로 모델 생성
##gamma숫자값 클수록 vectors많이 생김
model_2 <- svm(Species ~ ., data = train, gamma=1, cost=16)  ##attach하지 않아도 Species임
model_2
summary(model)
print("----------------------------------------")
summary(model_2)  #gama는1 cost는 16인값임
model$call
model$levels
str(model)
##에측한 model을 시각화 support vector는 은 + 모양으로 나타남.
#### test 데이터 : visualize (classes by color, SV by crosses):
plot(cmdscale(dist(test[,-5])),
col = as.integer(test[,5]),
pch = c("o","+")[1:150 %in% model$index + 1])
#### train데이터 : visualize (classes by color, SV by crosses):
plot(cmdscale(dist(train[,-5])),
col = as.integer(train[,5]),
pch = c("o","+")[1:150 %in% model$index + 1])
###테스트자료에서 svm확인
print(predict(model,test))
#정오분류표(confusion matrix) 작성
##행은 실제 iris, 열은 svm
result=table(test$Species, predict(model, test))
result
정답율=sum(result[row(result)==col(result)])/sum(result)
오답율=1-정답율
print("-------정,오분류----")
print(paste("정답율:", 정답율))
print(paste("오답율:", 오답율))
#정오분류표(confusion matrix) 작성
##행은 실제 iris, 열은 svm
result=table(test$Species, predict(model_2, test))
result
정답율=sum(result[row(result)==col(result)])/sum(result)
오답율=1-정답율
print("-------정,오분류----")
print(paste("정답율:", 정답율))
print(paste("오답율:", 오답율))
model_linear <- svm(Species ~ ., data = train, kernel="linear")  ##attach하지 않아도 Species임
model_linear
summary(model_linear)
#### train데이터 : visualize (classes by color, SV by crosses):
plot(cmdscale(dist(test[,-5])),
col = as.integer(test[,5]),
pch = c("o","+")[1:150 %in% model_linear$index + 1])
#정오분류표(confusion matrix) 작성
##행은 실제 iris, 열은 svm
result=table(test$Species, predict(model_linear, test))
result
정답율=sum(result[row(result)==col(result)])/sum(result)
오답율=1-정답율
print("-------정,오분류----")
print(paste("정답율:", 정답율))
print(paste("오답율:", 오답율))
